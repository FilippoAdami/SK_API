name: Build

on:
  push:
    branches: [deploy]

jobs:
  build:
    permissions: write-all
    name: Build and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to ghcr.io
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata from repository
      uses: docker/metadata-action@v3
      id: meta
      with:
        images: ghcr.io/${{ github.repository }}
    - name: Build and push to ghcr.io
      uses: docker/build-push-action@v2
      with:
        context: .
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
    - # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    - name: Downcase Github repository
      run: |
        echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
    - name: Push to ghcr.io with retries
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 5
        max_attempts: 5
        command: echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r i; do echo "Pushing $i"; docker push $i; done
    - name: Echo docker config
      run: |
        cat $DOCKER_CONFIG/config.json
    - name: Deploy to Kubernetes cluster
      uses: daviFrag/helm@master
      with:
        release: 'skapi-prod'
        namespace: 'skapi-prod'
        chart: 'helm/skapi'
        token: '${{ github.token }}'
        values: |
          url: test-skapi.polyglot-edu.com
          cfOriginKey: ${{ secrets.CFORIGIN }}
          dockerconfigjson: ${{ env.DOCKER_CONFIG }}
          image:
            repository: ${{ steps.meta.outputs.tags }}
          env:
            openAiSecret: ${{ secrets.OPENAPI_SECRET_KEY }}
            openAiEndpoint: ${{ secrets.OPENAPI_ENDPOINT }}
            openAiGpt35Dn: ${{ secrets.GPT_35_TURBO_DN }}
            secretToken: ${{ secrets.SECRET_TOKEN }}
      env:
        KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
